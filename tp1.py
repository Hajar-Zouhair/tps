# -*- coding: utf-8 -*-
"""TP1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fyjtWivlBXpPEvBYT8fccf5TSRb2iiCX
"""

#EX1
def ex1(chaine,idx1,idx2):
  if(idx1<idx2):
    v_min=idx1
    v_max=idx2
  else:
    v_min=idx2
    v_max=idx1
  string=chaine[v_min:v_max]
  l=len(string)
  return string,l
print(ex1("0123456",1,3))

#EX2
def somme(x,y):
  return x+y
#Call with the values 1 and 2.1

x=somme(1,2.1)
print("la somme x egale a",x,"type de x",type(x))

#Call with the values 1 and False

x=somme(False,2)
print("la somme x egale a",x,"type de x",type(x))

#EX3
def dic(chaine):
  d={}
  l=len(chaine)
  for i in range(l):
    if chaine[i] not in d:
      compteur=1
      j=i+1
      while (j<l):
        if chaine[i]==chaine[j]:
          compteur=compteur+1
        j=j+1
      d[chaine[i]]=compteur
  return d
print(dic("test"))

#EX4
def reverse(liste):
  i=0
  rvr=[0]*len(liste)
  for j in range (-1,-len(liste)-1,-1):
    if(i<len(liste)):
      rvr[i]=liste[j]
      print(rvr[i],liste[i])
      i=i+1
reverse([1,2,3,4,5])

#EX5
#def concath(a,b):
import numpy as np

a = np.ones((1, 10)).reshape(2,-1)
b = np.zeros((1, 10)).reshape(2,-1)

print(a)
print(b)
np.hstack((a,b))

#EX6
import numpy as np
a = np.arange(1,4)
b = np.ones((3,3,3))
print(np.hstack((a[0],a[0],a[0],a[1],a[1],a[1],a[2],a[2],a[2],a[0],a[1],a[2],a[0],a[1],a[2],a[0],a[1],a[2])))
print("\n")
c=np.zeros((3,3,3)) 
d=np.zeros((3,9))
print(c+a)
print("\n")
print((d+1)*2)