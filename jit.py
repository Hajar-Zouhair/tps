# -*- coding: utf-8 -*-
"""JIT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DEO8RMK5anay0iEZi6dxJSDInvesQL3N
"""

# Commented out IPython magic to ensure Python compatibility.
from numba import jit
import numpy

from matplotlib import pyplot, cm
# %matplotlib inline
@jit
def mandel(x, y, max_iters):
    i = 0
    c = complex(x, y)
    z = 0.0j
    for i in range(max_iters):
        z = z * z + c
        if (z.real * z.real + z.imag * z.imag) >= 4:
            return i

    return 255
@jit
def create_fractal(min_x, max_x, min_y, max_y, image, iters):
    height = image.shape[0]
    width = image.shape[1]

    pixel_size_x = (max_x - min_x) / width
    pixel_size_y = (max_y - min_y) / height
    for x in range(width):
        real = min_x + x * pixel_size_x
        for y in range(height):
            imag = min_y + y * pixel_size_y
            color = mandel(real, imag, iters)
            image[y, x] = color

    return image
image = numpy.zeros((500 * 2, 750 * 2), dtype=numpy.uint8)
from timeit import default_timer as timer
i=timer()
image = create_fractal(-2.0, 1.0, -1.0, 1.0, image, 20)
f=timer()
pyplot.figure(figsize=(10,8))
print('time: %f' % (f - i))
pyplot.imshow(image, cmap=cm.viridis)
pyplot.colorbar();
#commentaire: sans l'utilistation de jit le programme a pris time: 5.603028s alors qu'apres son integration il a pris time: 0.602843s