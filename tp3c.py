# -*- coding: utf-8 -*-
"""TP3C.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17b86Eg1O6LcVIQHriIpeNRAb6tWopPLD
"""

#EXERCICE 1
import pandas as pd
data=pd.read_csv('/content/Automobile_data.csv')
print(data.iloc[0:5]) #affichage des 5 premieres lignes
print(data.iloc[56:62]) #affichage des 5 dernieres lignes

#EXERCICE 2
import pandas as pd
data=pd.read_csv('/content/Automobile_data.csv')
print(data.isna().sum()) # je verifie ou se triuvent les cases vides et je les trouve que dans la colonne "price"
data["price"]=data["price"].fillna(-1) #je rempli les cases vides dans la colonne price par -1 car le prix ne peut pas etre nul
for i in range(61): #je parcours le datafarme
  if data.loc[i,"price"]==-1: #si je trouve une case vide dans la colonne price
    s=0 # s me serve à sommer les prix
    n=0 # n me serve à sommer le nombre de fois que j ai sommer
    for j in range(61): # apres avoir trouvé une case vide je parcours le df a nouveau
      if data.loc[j,"company"]==data.loc[i,"company"] and data.loc[j,"price"]!=-1: #a chaque fois que je trouve un prix different de -1 de meme company que celle de la case vide
        s=s+data.loc[j,"price"] # j'ajoute le prix a s
        n=n+1 # et j'incremente
    data.loc[i,"price"]=s/n # je replie la case vide par la moyenne des prix de la meme company

#EXERCICE 3:
import pandas as pd
data=pd.read_csv('/content/Automobile_data.csv')
data.loc[[data["price"].argmax()], ["company", "price"]]

#EXERCICE 4:
import pandas as pd
data=pd.read_csv('/content/Automobile_data.csv')
print(data[data["company"]=="toyota"])

#EXERCICE 5:
import pandas as pd
data=pd.read_csv('/content/Automobile_data.csv')
s=1
for i in range(60):
  if data["company"][i]==data["company"][i+1]:
    s=s+1
  else:
    print(data["company"][i],s)
    s=1
print(data["company"][i],s)

import pandas as pd
data=pd.read_csv('/content/Automobile_data.csv')
#on a besoin de remlir les cases vides dans le df 
data["price"]=data["price"].fillna(-1) #je rempli les cases vides dans la colonne price par -1 car le prix ne peut pas etre nul
for i in range(61): #je parcours le datafarme
  if data.loc[i,"price"]==-1: #si je trouve une case vide dans la colonne price
    s=0 # s me serve à sommer les prix
    n=0 # n me serve à sommer le nombre de fois que j ai sommer
    for j in range(61): # apres avoir trouvé une case vide je parcours le df a nouveau
      if data.loc[j,"company"]==data.loc[i,"company"] and data.loc[j,"price"]!=-1: #a chaque fois que je trouve un prix different de -1 de meme company que celle de la case vide
        s=s+data.loc[j,"price"] # j'ajoute le prix a s
        n=n+1 # et j'incremente
    data.loc[i,"price"]=s/n # je replie la case vide par la moyenne des prix de la meme company
#EXERCICE 6:
maxi=data["price"][0]
for i in range(60):
  if data["company"][i]==data["company"][i+1]:
    if data["price"][i+1]>maxi:
      maxi=data["price"][i+1]
  else:
    print(data["company"][i],maxi)
    maxi=data["price"][i+1]
print(data["company"][i],maxi)
#EXERCICE 7:
import statistics as st
s=1
a=0
for i in range(60):
  if data["company"][i]==data["company"][i+1]:
    s=s+1
  else:
    print(data["company"][a],st.mean(data.iloc[a:s,8]))
    a=s
    s=s+1
print(data["company"][a],st.mean(data.iloc[a:s,8]))

#EXERCICE 8:
import pandas as pd
data=pd.read_csv('/content/Automobile_data.csv')
data.sort_values("price", ascending=False)

#EXERCICE 9:
import pandas as pd
Germany = pd.DataFrame({'Company': ['Ford', 'Mercedes', 'BMV', 'Audi'], 'Price': [23845, 171995, 135925 , 71400]})
Japan = pd.DataFrame({'Company': ['Toyota', 'Honda', 'Nissan', 'Mitsubishi '], 'Price': [29995, 23600, 61500 , 58900]})
pd.concat([Germany,Japan])

#EXERCICE 10:
import pandas as pd
Car_Price = pd.DataFrame({'Company': ['Toyota', 'Honda', 'BMV', 'Audi'], 'Price': [23845, 17995, 135925 , 71400]})
car_Horsepower = pd.DataFrame({'Company': ['Toyota', 'Honda', 'BMV', 'Audi'], 'horsepower': [141, 80, 182 , 160]})
new=pd.concat([Car_Price,car_Horsepower], axis=1)
new= new.loc[:,~new.columns.duplicated()]
new