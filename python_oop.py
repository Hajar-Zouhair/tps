# -*- coding: utf-8 -*-
"""python_oop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j62gXXnUE0Yw69ipL18T9ic0fYWMb0Nk
"""

#EX1
import datetime

class Person:

    def __init__(self, name, surname, birthdate, address, telephone, email):
        self.name = name
        self.surname = surname
        self.birthdate = birthdate

        self.address = address
        self.telephone = telephone
        self.email = email

    def age(self):
        today = datetime.date.today()
        age = today.year - self.birthdate.year

        if today < datetime.date(today.year, self.birthdate.month, self.birthdate.day):
            age -= 1

        return age

person = Person(
    "Jane",
    "Doe",
    datetime.date(1992, 3, 12), # year, month, day
    "No. 12 Short Street, Greenville",
    "555 456 0987",
    "jane.doe@example.com"
)

print(person.name)
print(person.email)
print(person.age())
'''Explain what the following variables refer to, and their scope:

Person : est une classe ( le nom de la classe)
person : est une instence
surname : attribut
self : il lie les attributs avec les arguments donnes
age (the function name) : methode
age (the variable used inside the function) : argument
self.email : attribut de la classe
person.email : attribut de 'instance'''



#EX2
import datetime # we will use this for date objects
today = datetime.date.today()
class Person:

    def __init__(self, name, surname, birthdate, address, telephone, email):
        self.name = name
        self.surname = surname
        self.birthdate = birthdate

        self.address = address
        self.telephone = telephone
        self.email = email
        age=today.year - birthdate.year
        self.age = age
        if today < datetime.date(today.year, birthdate.month, birthdate.day):
            age -= 1
      
person = Person(
    "Jane",
    "Doe",
    datetime.date(2001, 7, 3), # year, month, day
    "No. 12 Short Street, Greenville",
    "555 456 0987",
    "jane.doe@example.com"
)
print(person.age)

#EX3
class Smith:
 surname = "Smith" #globale por toutes les instances et ne peut pas etre changé d'une instance a une autre
 profession = "smith" #peut etre changée si on cree un objet

 def __init__(self, name, profession=None): #name est l'un des parametres du constructeur
     self.name = name
     if profession is not None:
         self.profession = profession

#EX4
class Numbers:
  MULTIPLIER=4
  def __init__(self,x,y):
    self.x=x
    self.y=y
  def add(self):
    return self.x+self.y
  def multiply(self,a):
    return self.MULTIPLIER * a
  @staticmethod
  def subtract(b,c):
    return b-c
  @property
  def value(self):
    return self.x, self.y
  def setterx(self, value):
        self.x = value
  def deleterx(self):
        del self.x
  def settery(self, value):
        self.y = value
  def deletery(self):
        del self.y

import datetime

class Person:

    def __init__(self, name, surname, birthdate, address, telephone, email):
        self.name = name
        self.surname = surname
        self.birthdate = birthdate

        self.address = address
        self.telephone = telephone
        self.email = email

    def age(self):
        today = datetime.date.today()
        age = today.year - self.birthdate.year

        if today < datetime.date(today.year, self.birthdate.month, self.birthdate.day):
            age -= 1

        return age

p = Person("Jane","Doe",datetime.date(1992, 3, 12),"No. 12 Short Street, Greenville","555 456 0987","jane.doe@example.com")
#qst
dir(p)
dir(Person)
#qstA
print(p.__str__) #elle donne une sortie informative chaque fois qu'on utilisera cet objet dans le cadre d'une chaîne
print(str(p)) 
#qstB
print(type(p)) #affiche le nom du programme en execution
#qstC
print(type(Person)) #affiche que la classe est de type 'type'
#qstD
def qstD(obj):
    for i, j in obj.__dict__.items():
        print(i, j)
print(qstD(p))

#EX6
class classe:
    def __init__(self, **kwargs):
        for i, j in kwargs.items():
            setattr(self, i, j)

    def __str__(self):
        attributs = ["%s=%s" % (i, j) for (i, j) in self.__dict__.items()]
        nomclasse = self.__class__.__name__
        return "%s: %s" % (nomclasse, " ".join(attributs))